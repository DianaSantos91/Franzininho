
Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  000003ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fe8  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088c  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089f  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00002630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c9  00000000  00000000  0000282c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000083e  00000000  00000000  00002ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	23 c0       	rjmp	.+70     	; 0x48 <__ctors_end>
   2:	32 c0       	rjmp	.+100    	; 0x68 <__bad_interrupt>
   4:	31 c0       	rjmp	.+98     	; 0x68 <__bad_interrupt>
   6:	30 c0       	rjmp	.+96     	; 0x68 <__bad_interrupt>
   8:	2f c0       	rjmp	.+94     	; 0x68 <__bad_interrupt>
   a:	4c c0       	rjmp	.+152    	; 0xa4 <__vector_5>
   c:	2d c0       	rjmp	.+90     	; 0x68 <__bad_interrupt>
   e:	2c c0       	rjmp	.+88     	; 0x68 <__bad_interrupt>
  10:	2b c0       	rjmp	.+86     	; 0x68 <__bad_interrupt>
  12:	2a c0       	rjmp	.+84     	; 0x68 <__bad_interrupt>
  14:	29 c0       	rjmp	.+82     	; 0x68 <__bad_interrupt>
  16:	28 c0       	rjmp	.+80     	; 0x68 <__bad_interrupt>
  18:	27 c0       	rjmp	.+78     	; 0x68 <__bad_interrupt>
  1a:	26 c0       	rjmp	.+76     	; 0x68 <__bad_interrupt>
  1c:	25 c0       	rjmp	.+74     	; 0x68 <__bad_interrupt>

0000001e <__trampolines_end>:
  1e:	01 02       	muls	r16, r17
  20:	00 00       	nop
  22:	04 00       	.word	0x0004	; ????
  24:	00 00       	nop
	...

00000028 <digital_pin_to_bit_mask_PGM>:
  28:	01 02 04 08 10 20 20 04 10 08                       .....  ...

00000032 <digital_pin_to_port_PGM>:
  32:	02 02 02 02 02 02 02 02 02 02                       ..........

0000003c <port_to_output_PGM>:
  3c:	00 00 00 00 38 00                                   ....8.

00000042 <port_to_mode_PGM>:
  42:	00 00 00 00 37 00                                   ....7.

00000048 <__ctors_end>:
  48:	11 24       	eor	r1, r1
  4a:	1f be       	out	0x3f, r1	; 63
  4c:	cf e5       	ldi	r28, 0x5F	; 95
  4e:	d2 e0       	ldi	r29, 0x02	; 2
  50:	de bf       	out	0x3e, r29	; 62
  52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_clear_bss>:
  54:	20 e0       	ldi	r18, 0x00	; 0
  56:	a0 e6       	ldi	r26, 0x60	; 96
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	01 c0       	rjmp	.+2      	; 0x5e <.do_clear_bss_start>

0000005c <.do_clear_bss_loop>:
  5c:	1d 92       	st	X+, r1

0000005e <.do_clear_bss_start>:
  5e:	a9 36       	cpi	r26, 0x69	; 105
  60:	b2 07       	cpc	r27, r18
  62:	e1 f7       	brne	.-8      	; 0x5c <.do_clear_bss_loop>
  64:	15 d0       	rcall	.+42     	; 0x90 <main>
  66:	67 c1       	rjmp	.+718    	; 0x336 <_exit>

00000068 <__bad_interrupt>:
  68:	cb cf       	rjmp	.-106    	; 0x0 <__vectors>

0000006a <setup>:


// the setup function runs once when you press reset or power the board
void setup() {
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);
  6a:	61 e0       	ldi	r22, 0x01	; 1
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	f8 c0       	rjmp	.+496    	; 0x260 <pinMode>

00000070 <loop>:
}

// the loop function runs over and over again forever
void loop() {
  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
  70:	61 e0       	ldi	r22, 0x01	; 1
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	31 d1       	rcall	.+610    	; 0x2d8 <digitalWrite>
  delay(1000);                       // wait for a second
  76:	68 ee       	ldi	r22, 0xE8	; 232
  78:	73 e0       	ldi	r23, 0x03	; 3
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	82 d0       	rcall	.+260    	; 0x184 <delay>
  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
  80:	60 e0       	ldi	r22, 0x00	; 0
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	29 d1       	rcall	.+594    	; 0x2d8 <digitalWrite>
  delay(1000);                       // wait for a second
  86:	68 ee       	ldi	r22, 0xE8	; 232
  88:	73 e0       	ldi	r23, 0x03	; 3
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	7a c0       	rjmp	.+244    	; 0x184 <delay>

00000090 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
  90:	b2 d0       	rcall	.+356    	; 0x1f6 <init>

	initVariant();
  92:	e2 d0       	rcall	.+452    	; 0x258 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
  94:	ea df       	rcall	.-44     	; 0x6a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
  96:	c0 e0       	ldi	r28, 0x00	; 0
  98:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
  9a:	ea df       	rcall	.-44     	; 0x70 <loop>
		if (serialEventRun) serialEventRun();
  9c:	20 97       	sbiw	r28, 0x00	; 0
  9e:	e9 f3       	breq	.-6      	; 0x9a <main+0xa>
  a0:	af df       	rcall	.-162    	; 0x0 <__vectors>
  a2:	fb cf       	rjmp	.-10     	; 0x9a <main+0xa>

000000a4 <__vector_5>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	3f 93       	push	r19
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
  ba:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <timer0_millis>
  be:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <timer0_millis+0x1>
  c2:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <timer0_millis+0x2>
  c6:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <timer0_millis+0x3>
  ca:	30 91 60 00 	lds	r19, 0x0060	; 0x800060 <_edata>
  ce:	26 e0       	ldi	r18, 0x06	; 6
  d0:	23 0f       	add	r18, r19
  d2:	2d 37       	cpi	r18, 0x7D	; 125
  d4:	20 f4       	brcc	.+8      	; 0xde <__vector_5+0x3a>
  d6:	02 96       	adiw	r24, 0x02	; 2
  d8:	a1 1d       	adc	r26, r1
  da:	b1 1d       	adc	r27, r1
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <__vector_5+0x44>
  de:	29 e8       	ldi	r18, 0x89	; 137
  e0:	23 0f       	add	r18, r19
  e2:	03 96       	adiw	r24, 0x03	; 3
  e4:	a1 1d       	adc	r26, r1
  e6:	b1 1d       	adc	r27, r1
  e8:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
  ec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timer0_millis>
  f0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <timer0_millis+0x1>
  f4:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <timer0_millis+0x2>
  f8:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <timer0_millis+0x3>
  fc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timer0_overflow_count>
 100:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <timer0_overflow_count+0x1>
 104:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <timer0_overflow_count+0x2>
 108:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <timer0_overflow_count+0x3>
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	a1 1d       	adc	r26, r1
 110:	b1 1d       	adc	r27, r1
 112:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <timer0_overflow_count>
 116:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <timer0_overflow_count+0x1>
 11a:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <timer0_overflow_count+0x2>
 11e:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <timer0_overflow_count+0x3>
 122:	bf 91       	pop	r27
 124:	af 91       	pop	r26
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	3f 91       	pop	r19
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <micros>:
 138:	3f b7       	in	r19, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timer0_overflow_count>
 140:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <timer0_overflow_count+0x1>
 144:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <timer0_overflow_count+0x2>
 148:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <timer0_overflow_count+0x3>
 14c:	22 b7       	in	r18, 0x32	; 50
 14e:	08 b6       	in	r0, 0x38	; 56
 150:	01 fe       	sbrs	r0, 1
 152:	05 c0       	rjmp	.+10     	; 0x15e <micros+0x26>
 154:	2f 3f       	cpi	r18, 0xFF	; 255
 156:	19 f0       	breq	.+6      	; 0x15e <micros+0x26>
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	a1 1d       	adc	r26, r1
 15c:	b1 1d       	adc	r27, r1
 15e:	3f bf       	out	0x3f, r19	; 63
 160:	ba 2f       	mov	r27, r26
 162:	a9 2f       	mov	r26, r25
 164:	98 2f       	mov	r25, r24
 166:	88 27       	eor	r24, r24
 168:	82 0f       	add	r24, r18
 16a:	91 1d       	adc	r25, r1
 16c:	a1 1d       	adc	r26, r1
 16e:	b1 1d       	adc	r27, r1
 170:	bc 01       	movw	r22, r24
 172:	cd 01       	movw	r24, r26
 174:	43 e0       	ldi	r20, 0x03	; 3
 176:	66 0f       	add	r22, r22
 178:	77 1f       	adc	r23, r23
 17a:	88 1f       	adc	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	4a 95       	dec	r20
 180:	d1 f7       	brne	.-12     	; 0x176 <micros+0x3e>
 182:	08 95       	ret

00000184 <delay>:
 184:	8f 92       	push	r8
 186:	9f 92       	push	r9
 188:	af 92       	push	r10
 18a:	bf 92       	push	r11
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	6b 01       	movw	r12, r22
 196:	7c 01       	movw	r14, r24
 198:	cf df       	rcall	.-98     	; 0x138 <micros>
 19a:	4b 01       	movw	r8, r22
 19c:	5c 01       	movw	r10, r24
 19e:	c1 14       	cp	r12, r1
 1a0:	d1 04       	cpc	r13, r1
 1a2:	e1 04       	cpc	r14, r1
 1a4:	f1 04       	cpc	r15, r1
 1a6:	f1 f0       	breq	.+60     	; 0x1e4 <delay+0x60>
 1a8:	c5 d0       	rcall	.+394    	; 0x334 <yield>
 1aa:	c6 df       	rcall	.-116    	; 0x138 <micros>
 1ac:	dc 01       	movw	r26, r24
 1ae:	cb 01       	movw	r24, r22
 1b0:	88 19       	sub	r24, r8
 1b2:	99 09       	sbc	r25, r9
 1b4:	aa 09       	sbc	r26, r10
 1b6:	bb 09       	sbc	r27, r11
 1b8:	88 3e       	cpi	r24, 0xE8	; 232
 1ba:	93 40       	sbci	r25, 0x03	; 3
 1bc:	a1 05       	cpc	r26, r1
 1be:	b1 05       	cpc	r27, r1
 1c0:	70 f3       	brcs	.-36     	; 0x19e <delay+0x1a>
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	c2 1a       	sub	r12, r18
 1c6:	d1 08       	sbc	r13, r1
 1c8:	e1 08       	sbc	r14, r1
 1ca:	f1 08       	sbc	r15, r1
 1cc:	88 ee       	ldi	r24, 0xE8	; 232
 1ce:	88 0e       	add	r8, r24
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	98 1e       	adc	r9, r24
 1d4:	a1 1c       	adc	r10, r1
 1d6:	b1 1c       	adc	r11, r1
 1d8:	c1 14       	cp	r12, r1
 1da:	d1 04       	cpc	r13, r1
 1dc:	e1 04       	cpc	r14, r1
 1de:	f1 04       	cpc	r15, r1
 1e0:	21 f7       	brne	.-56     	; 0x1aa <delay+0x26>
 1e2:	dd cf       	rjmp	.-70     	; 0x19e <delay+0x1a>
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	df 90       	pop	r13
 1ea:	cf 90       	pop	r12
 1ec:	bf 90       	pop	r11
 1ee:	af 90       	pop	r10
 1f0:	9f 90       	pop	r9
 1f2:	8f 90       	pop	r8
 1f4:	08 95       	ret

000001f6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 1f6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 1f8:	8a b5       	in	r24, 0x2a	; 42
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	8a bd       	out	0x2a, r24	; 42
	sbi(TCCR0A, WGM00);
 1fe:	8a b5       	in	r24, 0x2a	; 42
 200:	81 60       	ori	r24, 0x01	; 1
 202:	8a bd       	out	0x2a, r24	; 42
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 204:	83 b7       	in	r24, 0x33	; 51
 206:	82 60       	ori	r24, 0x02	; 2
 208:	83 bf       	out	0x33, r24	; 51
	sbi(TCCR0B, CS00);
 20a:	83 b7       	in	r24, 0x33	; 51
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	83 bf       	out	0x33, r24	; 51
	#error Timer 0 prescale factor 64 not set correctly
#endif

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
 210:	89 b7       	in	r24, 0x39	; 57
 212:	82 60       	ori	r24, 0x02	; 2
 214:	89 bf       	out	0x39, r24	; 57
	sbi(TCCR1B, CS11);
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
#endif
#elif defined(TCCR1) && defined(CS11) && defined(CS10)
	sbi(TCCR1, CS11);
 216:	80 b7       	in	r24, 0x30	; 48
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	80 bf       	out	0x30, r24	; 48
#if F_CPU >= 8000000L
	sbi(TCCR1, CS10);
 21c:	80 b7       	in	r24, 0x30	; 48
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	80 bf       	out	0x30, r24	; 48
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
 222:	32 9a       	sbi	0x06, 2	; 6
		sbi(ADCSRA, ADPS1);
 224:	31 9a       	sbi	0x06, 1	; 6
		cbi(ADCSRA, ADPS0);
 226:	30 98       	cbi	0x06, 0	; 6
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 228:	37 9a       	sbi	0x06, 7	; 6
 22a:	08 95       	ret

0000022c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	81 f0       	breq	.+32     	; 0x250 <turnOffPWM+0x24>
 230:	18 f4       	brcc	.+6      	; 0x238 <turnOffPWM+0xc>
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	51 f0       	breq	.+20     	; 0x24a <turnOffPWM+0x1e>
 236:	08 95       	ret
 238:	83 30       	cpi	r24, 0x03	; 3
 23a:	19 f0       	breq	.+6      	; 0x242 <turnOffPWM+0x16>
 23c:	84 30       	cpi	r24, 0x04	; 4
 23e:	09 f0       	breq	.+2      	; 0x242 <turnOffPWM+0x16>
 240:	08 95       	ret
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 242:	8c b5       	in	r24, 0x2c	; 44
 244:	8f 7d       	andi	r24, 0xDF	; 223
 246:	8c bd       	out	0x2c, r24	; 44
 248:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 24a:	8a b5       	in	r24, 0x2a	; 42
 24c:	8f 77       	andi	r24, 0x7F	; 127
 24e:	02 c0       	rjmp	.+4      	; 0x254 <turnOffPWM+0x28>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 250:	8a b5       	in	r24, 0x2a	; 42
 252:	8f 7d       	andi	r24, 0xDF	; 223
 254:	8a bd       	out	0x2a, r24	; 42
 256:	08 95       	ret

00000258 <initVariant>:

#ifdef ARDUINO_MAIN

void initVariant()
{
	GTCCR |= (1 << PWM1B);
 258:	8c b5       	in	r24, 0x2c	; 44
 25a:	80 64       	ori	r24, 0x40	; 64
 25c:	8c bd       	out	0x2c, r24	; 44
 25e:	08 95       	ret

00000260 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	fc 01       	movw	r30, r24
 268:	e8 5d       	subi	r30, 0xD8	; 216
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 26e:	fc 01       	movw	r30, r24
 270:	ee 5c       	subi	r30, 0xCE	; 206
 272:	ff 4f       	sbci	r31, 0xFF	; 255
 274:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 276:	88 23       	and	r24, r24
 278:	61 f1       	breq	.+88     	; 0x2d2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	fc 01       	movw	r30, r24
 282:	ee 5b       	subi	r30, 0xBE	; 190
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	c5 91       	lpm	r28, Z+
 288:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 28a:	fc 01       	movw	r30, r24
 28c:	e4 5c       	subi	r30, 0xC4	; 196
 28e:	ff 4f       	sbci	r31, 0xFF	; 255
 290:	a5 91       	lpm	r26, Z+
 292:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 294:	61 11       	cpse	r22, r1
 296:	09 c0       	rjmp	.+18     	; 0x2aa <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 298:	9f b7       	in	r25, 0x3f	; 63
                cli();
 29a:	f8 94       	cli
		*reg &= ~bit;
 29c:	88 81       	ld	r24, Y
 29e:	20 95       	com	r18
 2a0:	82 23       	and	r24, r18
 2a2:	88 83       	st	Y, r24
		*out &= ~bit;
 2a4:	ec 91       	ld	r30, X
 2a6:	2e 23       	and	r18, r30
 2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 2aa:	62 30       	cpi	r22, 0x02	; 2
 2ac:	61 f4       	brne	.+24     	; 0x2c6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 2ae:	9f b7       	in	r25, 0x3f	; 63
                cli();
 2b0:	f8 94       	cli
		*reg &= ~bit;
 2b2:	88 81       	ld	r24, Y
 2b4:	32 2f       	mov	r19, r18
 2b6:	30 95       	com	r19
 2b8:	83 23       	and	r24, r19
 2ba:	88 83       	st	Y, r24
		*out |= bit;
 2bc:	ec 91       	ld	r30, X
 2be:	2e 2b       	or	r18, r30
 2c0:	2c 93       	st	X, r18
		SREG = oldSREG;
 2c2:	9f bf       	out	0x3f, r25	; 63
 2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 2c6:	8f b7       	in	r24, 0x3f	; 63
                cli();
 2c8:	f8 94       	cli
		*reg |= bit;
 2ca:	e8 81       	ld	r30, Y
 2cc:	2e 2b       	or	r18, r30
 2ce:	28 83       	st	Y, r18
		SREG = oldSREG;
 2d0:	8f bf       	out	0x3f, r24	; 63
	}
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 2de:	28 2f       	mov	r18, r24
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	f9 01       	movw	r30, r18
 2e4:	e2 5e       	subi	r30, 0xE2	; 226
 2e6:	ff 4f       	sbci	r31, 0xFF	; 255
 2e8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 2ea:	f9 01       	movw	r30, r18
 2ec:	e8 5d       	subi	r30, 0xD8	; 216
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 2f2:	f9 01       	movw	r30, r18
 2f4:	ee 5c       	subi	r30, 0xCE	; 206
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 2fa:	cc 23       	and	r28, r28
 2fc:	b9 f0       	breq	.+46     	; 0x32c <digitalWrite+0x54>
 2fe:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 300:	81 11       	cpse	r24, r1
 302:	94 df       	rcall	.-216    	; 0x22c <turnOffPWM>

	out = portOutputRegister(port);
 304:	ec 2f       	mov	r30, r28
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	e4 5c       	subi	r30, 0xC4	; 196
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	a5 91       	lpm	r26, Z+
 312:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 314:	9f b7       	in	r25, 0x3f	; 63
	cli();
 316:	f8 94       	cli

	if (val == LOW) {
 318:	11 11       	cpse	r17, r1
 31a:	04 c0       	rjmp	.+8      	; 0x324 <digitalWrite+0x4c>
		*out &= ~bit;
 31c:	8c 91       	ld	r24, X
 31e:	d0 95       	com	r29
 320:	d8 23       	and	r29, r24
 322:	02 c0       	rjmp	.+4      	; 0x328 <digitalWrite+0x50>
	} else {
		*out |= bit;
 324:	ec 91       	ld	r30, X
 326:	de 2b       	or	r29, r30
 328:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 32a:	9f bf       	out	0x3f, r25	; 63
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	08 95       	ret

00000334 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 334:	08 95       	ret

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
